// Generated by CoffeeScript 1.9.3
(function() {
  var Bitfinex, Promise, crypto, qs, request;

  Promise = require('bluebird');

  request = require('request');

  crypto = require('crypto');

  qs = require('qs');

  module.exports = Bitfinex = (function() {
    function Bitfinex(key, secret) {
      this.key = key;
      this.secret = secret;
      this.version = '/v1/';
      this.url = "https://api.bitfinex.com" + this.version;
      this.nonce = Math.round((new Date()).getTime() / 1000);
    }

    Bitfinex.prototype.ticker = function(symbol) {
      return this._makePublicRequest("pubticker/" + symbol);
    };

    Bitfinex.prototype.today = function(symbol) {
      return this._makePublicRequest("today/" + symbol);
    };

    Bitfinex.prototype.symbols = function() {
      return this._makePublicRequest('symbols');
    };

    Bitfinex.prototype.lends = function(currency, timestamp, limit_lends) {
      if (limit_lends == null) {
        limit_lends = 50;
      }
      return this._makePublicRequest("lends/" + currency, {
        timestamp: timestamp,
        limit_lends: limit_lends
      });
    };

    Bitfinex.prototype.lendbook = function(symbol, limit_bids, limit_asks) {
      if (limit_bids == null) {
        limit_bids = 50;
      }
      if (limit_asks == null) {
        limit_asks = 50;
      }
      return this._makePublicRequest("lendbook/" + symbol, {
        limit_bids: limit_bids,
        limit_asks: limit_asks
      });
    };

    Bitfinex.prototype.orderbook = function(symbol, limit_bids, limit_asks) {
      if (limit_bids == null) {
        limit_bids = 50;
      }
      if (limit_asks == null) {
        limit_asks = 50;
      }
      return this._makePublicRequest("book/" + symbol, {
        limit_bids: limit_bids,
        limit_asks: limit_asks
      });
    };

    Bitfinex.prototype.newOrder = function(symbol, amount, price, exchange, side, type, is_hidden) {
      var params;
      if (is_hidden == null) {
        is_hidden = false;
      }
      params = {
        symbol: symbol,
        amount: amount,
        price: price,
        exchange: exchange,
        side: side,
        type: type,
        is_hidden: is_hidden
      };
      return this._makePrivateRequest('order/new', params);
    };

    Bitfinex.prototype.newOrderMultiple = function(multi) {
      return this._makePrivateRequest('order/new/multi', multi);
    };

    Bitfinex.prototype.cancelOrder = function(order_id) {
      return this._makePrivateRequest('order/cancel', {
        order_id: order_id
      });
    };

    Bitfinex.prototype.cancelOrdersMulti = function(order_ids) {
      return this._makePrivateRequest('order/cancel/multi', {
        order_id: order_ids
      });
    };

    Bitfinex.prototype.cancelOrdersAll = function() {
      return this._makePrivateRequest('order/cancel/all');
    };

    Bitfinex.prototype.replaceOrder = function(order_id, symbol, amount, price, exchange, side, type, is_hidden) {
      var params;
      params = {
        order_id: order_id,
        symbol: symbol,
        amount: amount,
        exchange: exchange,
        side: side,
        type: type,
        is_hidden: is_hidden
      };
      if (price != null) {
        params.price = price;
      }
      return this._makePrivateRequest('order/cancel/replace', params);
    };

    Bitfinex.prototype.orderStatus = function(order_id) {
      return this._makePrivateRequest('order/status', {
        order_id: order_id
      });
    };

    Bitfinex.prototype.activeOrders = function() {
      return this._makePrivateRequest('orders');
    };

    Bitfinex.prototype.activePositions = function() {
      return this._makePrivateRequest('positions');
    };

    Bitfinex.prototype.claimPosition = function(position_id) {
      return this._makePrivateRequest('position/claim', {
        position_id: position_id
      });
    };

    Bitfinex.prototype.pastTrades = function(symbol, timestamp, limit_trades) {
      return this._makePrivateRequest('mytrades', {
        symbol: symbol,
        timestamp: timestamp,
        limit_trades: limit_trades
      });
    };

    Bitfinex.prototype.newOffer = function(currency, amount, rate, period, direction) {
      return this._makePrivateRequest('offer/new', {
        currency: currency,
        amount: amount,
        rate: rate,
        period: period,
        direction: direction
      });
    };

    Bitfinex.prototype.cancelOffer = function(offer_id) {
      return this._makePrivateRequest('offer/cancel', {
        offer_id: offer_id
      });
    };

    Bitfinex.prototype.offerStatus = function(offer_id) {
      return this._makePrivateRequest('offer/status', {
        offer_id: offer_id
      });
    };

    Bitfinex.prototype.activeOffers = function() {
      return this._makePrivateRequest('offers');
    };

    Bitfinex.prototype.activeCredits = function() {
      return this._makePrivateRequest('credits');
    };

    Bitfinex.prototype.balances = function() {
      return this._makePrivateRequest('balances');
    };

    Bitfinex.prototype.accountInfos = function() {
      return this._makePrivateRequest('account_infos');
    };

    Bitfinex.prototype.marginInfos = function() {
      return this._makePrivateRequest('margin_infos');
    };

    Bitfinex.prototype._nonce = function() {
      return '' + this.nonce++;
    };

    Bitfinex.prototype._makePublicRequest = function(path, params) {
      return this._makeRequest(path, params, 'GET');
    };

    Bitfinex.prototype._makePrivateRequest = function(path, params) {
      if (!this.key || !this.secret) {
        throw Error('missing api key or secret');
      }
      return this._makeRequest(path, params, 'POST');
    };

    Bitfinex.prototype._makeRequestObject = function(path, params, method) {
      var headers, payload, requestObj, signature;
      requestObj = {
        method: method,
        timeout: 15000,
        url: this.url + path
      };
      if (method === 'GET') {
        if (params != null) {
          requestObj.url = requestObj.url + "?" + (qs.stringify(params));
        }
      } else if (method === 'POST') {
        payload = params || {};
        payload.request = this.version + path;
        payload.nonce = this._nonce();
        payload = new Buffer(JSON.stringify(payload)).toString('base64');
        signature = crypto.createHmac('sha384', this.secret).update(payload).digest('hex');
        headers = {
          'X-BFX-APIKEY': this.key,
          'X-BFX-PAYLOAD': payload,
          'X-BFX-SIGNATURE': signature
        };
        requestObj.headers = headers;
      }
      return requestObj;
    };

    Bitfinex.prototype._makeRequest = function(path, params, method) {
      var requestObj;
      requestObj = this._makeRequestObject(path, params, method);
      return new Promise(function(resolve, reject) {
        return request(requestObj, function(err, response, body) {
          var error, result;
          if (err || response.statusCode !== 200) {
            reject({
              statusCode: response.statusCode,
              body: body,
              err: err
            });
          }
          try {
            result = JSON.parse(body);
          } catch (_error) {
            error = _error;
            return reject({
              body: body
            });
          }
          if (result.message != null) {
            return reject({
              message: result
            });
          }
          return resolve(result);
        });
      });
    };

    return Bitfinex;

  })();

}).call(this);
